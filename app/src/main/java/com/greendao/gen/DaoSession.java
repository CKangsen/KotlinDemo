package com.greendao.gen;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig callLogIdMappingDaoConfig;
    private final DaoConfig serverDeleteDaoConfig;
    private final DaoConfig localUpdateConflictContactDaoConfig;
    private final DaoConfig iDMappingDaoConfig;
    private final DaoConfig sMSidMappingDaoConfig;

    private final CallLogIdMappingDao callLogIdMappingDao;
    private final ServerDeleteDao serverDeleteDao;
    private final LocalUpdateConflictContactDao localUpdateConflictContactDao;
    private final IDMappingDao iDMappingDao;
    private final SMSidMappingDao sMSidMappingDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        callLogIdMappingDaoConfig = daoConfigMap.get(CallLogIdMappingDao.class).clone();
        callLogIdMappingDaoConfig.initIdentityScope(type);

        serverDeleteDaoConfig = daoConfigMap.get(ServerDeleteDao.class).clone();
        serverDeleteDaoConfig.initIdentityScope(type);

        localUpdateConflictContactDaoConfig = daoConfigMap.get(LocalUpdateConflictContactDao.class).clone();
        localUpdateConflictContactDaoConfig.initIdentityScope(type);

        iDMappingDaoConfig = daoConfigMap.get(IDMappingDao.class).clone();
        iDMappingDaoConfig.initIdentityScope(type);

        sMSidMappingDaoConfig = daoConfigMap.get(SMSidMappingDao.class).clone();
        sMSidMappingDaoConfig.initIdentityScope(type);

        callLogIdMappingDao = new CallLogIdMappingDao(callLogIdMappingDaoConfig, this);
        serverDeleteDao = new ServerDeleteDao(serverDeleteDaoConfig, this);
        localUpdateConflictContactDao = new LocalUpdateConflictContactDao(localUpdateConflictContactDaoConfig, this);
        iDMappingDao = new IDMappingDao(iDMappingDaoConfig, this);
        sMSidMappingDao = new SMSidMappingDao(sMSidMappingDaoConfig, this);

        registerDao(CallLogIdMapping.class, callLogIdMappingDao);
        registerDao(ServerDelete.class, serverDeleteDao);
        registerDao(LocalUpdateConflictContact.class, localUpdateConflictContactDao);
        registerDao(IDMapping.class, iDMappingDao);
        registerDao(SMSidMapping.class, sMSidMappingDao);
    }
    
    public void clear() {
        callLogIdMappingDaoConfig.clearIdentityScope();
        serverDeleteDaoConfig.clearIdentityScope();
        localUpdateConflictContactDaoConfig.clearIdentityScope();
        iDMappingDaoConfig.clearIdentityScope();
        sMSidMappingDaoConfig.clearIdentityScope();
    }

    public CallLogIdMappingDao getCallLogIdMappingDao() {
        return callLogIdMappingDao;
    }

    public ServerDeleteDao getServerDeleteDao() {
        return serverDeleteDao;
    }

    public LocalUpdateConflictContactDao getLocalUpdateConflictContactDao() {
        return localUpdateConflictContactDao;
    }

    public IDMappingDao getIDMappingDao() {
        return iDMappingDao;
    }

    public SMSidMappingDao getSMSidMappingDao() {
        return sMSidMappingDao;
    }

}
