package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IDMAPPING".
*/
public class IDMappingDao extends AbstractDao<IDMapping, Long> {

    public static final String TABLENAME = "IDMAPPING";

    /**
     * Properties of entity IDMapping.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Contact_id = new Property(1, Integer.class, "contact_id", false, "CONTACT_ID");
        public final static Property Local_version = new Property(2, Integer.class, "local_version", false, "LOCAL_VERSION");
        public final static Property Server_id = new Property(3, String.class, "server_id", false, "SERVER_ID");
        public final static Property Server_version = new Property(4, Integer.class, "server_version", false, "SERVER_VERSION");
        public final static Property Md5 = new Property(5, String.class, "md5", false, "MD5");
        public final static Property Openid = new Property(6, String.class, "openid", false, "OPENID");
        public final static Property Server_latest_version = new Property(7, Integer.class, "server_latest_version", false, "SERVER_LATEST_VERSION");
    }


    public IDMappingDao(DaoConfig config) {
        super(config);
    }
    
    public IDMappingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IDMAPPING\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CONTACT_ID\" INTEGER NOT NULL ," + // 1: contact_id
                "\"LOCAL_VERSION\" INTEGER NOT NULL ," + // 2: local_version
                "\"SERVER_ID\" TEXT NOT NULL UNIQUE ," + // 3: server_id
                "\"SERVER_VERSION\" INTEGER NOT NULL ," + // 4: server_version
                "\"MD5\" TEXT," + // 5: md5
                "\"OPENID\" TEXT NOT NULL ," + // 6: openid
                "\"SERVER_LATEST_VERSION\" INTEGER NOT NULL );"); // 7: server_latest_version
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IDMAPPING\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IDMapping entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getContact_id());
        stmt.bindLong(3, entity.getLocal_version());
        stmt.bindString(4, entity.getServer_id());
        stmt.bindLong(5, entity.getServer_version());
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(6, md5);
        }
        stmt.bindString(7, entity.getOpenid());
        stmt.bindLong(8, entity.getServer_latest_version());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IDMapping entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getContact_id());
        stmt.bindLong(3, entity.getLocal_version());
        stmt.bindString(4, entity.getServer_id());
        stmt.bindLong(5, entity.getServer_version());
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(6, md5);
        }
        stmt.bindString(7, entity.getOpenid());
        stmt.bindLong(8, entity.getServer_latest_version());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IDMapping readEntity(Cursor cursor, int offset) {
        IDMapping entity = new IDMapping( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // contact_id
            cursor.getInt(offset + 2), // local_version
            cursor.getString(offset + 3), // server_id
            cursor.getInt(offset + 4), // server_version
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // md5
            cursor.getString(offset + 6), // openid
            cursor.getInt(offset + 7) // server_latest_version
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IDMapping entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContact_id(cursor.getInt(offset + 1));
        entity.setLocal_version(cursor.getInt(offset + 2));
        entity.setServer_id(cursor.getString(offset + 3));
        entity.setServer_version(cursor.getInt(offset + 4));
        entity.setMd5(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOpenid(cursor.getString(offset + 6));
        entity.setServer_latest_version(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IDMapping entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IDMapping entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IDMapping entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
